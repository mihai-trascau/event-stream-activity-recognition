%% print_trigger(_/_).
print_trigger(all_defined_events).

/*
    CONTEXT FLAGS
*/

score_compute_flag(mean).
%% score_compute_flag(min).

/*
    UTILTIES
*/

%% aggr_score(+score1, +score2, -Res)
%% Returns average of the two scores
aggr_score(Score1, Score2, Res) :- score_compute_flag(mean), Res is (Score1+Score2)/2.

%% aggr_score(+score1, +score2, -Res)
%% Returns the minimum of the two scores
aggr_score(Score1, Score2, Res) :- score_compute_flag(min), Res is min(Score1,Score2).

/*
    CONTEXT MANAGEMENT RULES
*/

%% POSITION DATA
pos_score_diff_threshold(0.99).
pos_max_rule_window(2).

%% Validity extension of atomic pos(+Location,meta(+LastUpdate,+Confidence))
%% events, when no complex event (extended interval) is available for extension
r_pos_1 'rule:' pos(X,meta(L2, Score))
    <-  (pos(X,meta(L1,Score1)) 'timestamp' t1(T1), t2(T1))
        'seq'
        (pos(X,meta(L2,Score2)) 'timestamp' t1(T2), t2(T2))
        'fnot'
        (pos(X,meta(_,_)) 'timestamp' t1(T3), t2(T1), less_datime(T3,T1))
        'where' (
            pos_score_diff_threshold(Thresh),
            abs(Score1 - Score2) < Thresh,
            aggr_score(Score1,Score2,Score)
        ).

%% Validity extension of a complex pos(+Location,meta(+LastUpdate,+Confidence))
%% event with a newly added atomic event, subject to rule window constraints
r_pos_2 'rule:' pos(X,meta(L2, Score))
    <-  (pos(X,meta(L1,Score1)) 'timestamp' t1(T1), t2(T2), less_datime(T1,T2))
        'seq'
        (pos(X,meta(L2,Score2)) 'timestamp' t1(T3), t2(T3))
        'where' (
            pos_max_rule_window(MaxTDiff),
            datime_minus_datime(T3,T2,TDiff),
            TDiff =< MaxTDiff,
            pos_score_diff_threshold(Thresh),
            abs(Score1 - Score2) < Thresh,
            aggr_score(Score1,Score2,Score)
        ).

%% LOW LEVEL ACTIVITY DATA
lla_score_diff_threshold(0.9).
lla_max_rule_window(2).

%% Validity extension of atomic lla(+Activity,meta(+LastUpdate,+Confidence))
%% events, when no complex event (extended interval) is available for extension
r_lla_1 'rule:' lla(X,meta(L2, Score))
    <-  (lla(X,meta(L1,Score1)) 'timestamp' t1(T1), t2(T1))
        'seq'
        (lla(X,meta(L2,Score2)) 'timestamp' t1(T2), t2(T2))
        'fnot'
        (lla(X,meta(_,_)) 'timestamp' t1(T3), t2(T1), less_datime(T3,T1))
        'where' (
            lla_score_diff_threshold(Thresh),
            abs(Score1 - Score2) < Thresh,
            aggr_score(Score1,Score2,Score)
        ).

%% Validity extension of a complex lla(+Activity,meta(+LastUpdate,+Confidence))
%% event with a newly added atomic event, subject to rule window constraints
r_lla_2 'rule:' lla(X,meta(L2, Score))
    <-  (lla(X,meta(L1,Score1)) 'timestamp' t1(T1), t2(T2), less_datime(T1,T2))
        'seq'
        (lla(X,meta(L2,Score2)) 'timestamp' t1(T3), t2(T3))
        'where' (
            lla_max_rule_window(MaxTDiff),
            datime_minus_datime(T3,T2,TDiff),
            TDiff =< MaxTDiff,
            lla_score_diff_threshold(Thresh),
            abs(Score1 - Score2) < Thresh,
            aggr_score(Score1,Score2,Score)
        ).

/*
    DOMAIN RULES
*/

%% TODO - Implement domain specific rules based on the complex events